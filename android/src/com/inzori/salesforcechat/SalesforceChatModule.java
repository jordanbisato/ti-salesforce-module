/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.inzori.salesforcechat;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.kroll.common.Log;

import com.salesforce.android.chat.core.ChatConfiguration;
import com.salesforce.android.chat.ui.ChatUIConfiguration;
import com.salesforce.android.chat.ui.ChatUI;
import com.salesforce.android.chat.ui.ChatUIClient;
import com.salesforce.android.service.common.utilities.control.Async;



@Kroll.module(name="SalesforceChat", id="com.inzori.salesforcechat")
public class SalesforceChatModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "SalesforceChatModule";
	private static final boolean DBG = TiConfig.LOGD;

	public SalesforceChatModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	@Kroll.method
	public void launchChat(KrollDict args) {
		
		String ORG_ID = "";
		String DEPLOYMENT_ID = "";
		String BUTTON_ID = "";
		String LIVE_AGENT_POD = ""; 

		// Ti events "salesforce_chat:session_error", "salesforce_chat:session_end", "salesforce_chat:session_state""
		try {
			if(args.containsKey("orgId")){
				ORG_ID = args.getString("orgId");
			} else return;
			if (args.containsKey("deploymentId")) {
				DEPLOYMENT_ID = args.getString("deploymentId");
			} else return;
			if(args.containsKey("buttonId")){
				BUTTON_ID = args.getString("buttonId");
			} else return;
			if(args.containsKey("podName")){
				LIVE_AGENT_POD = args.getString("podName");
			}	else return;

			ChatConfiguration chatConfiguration = 
			new ChatConfiguration.Builder(ORG_ID, BUTTON_ID, 
										  DEPLOYMENT_ID, LIVE_AGENT_POD)
										  .build();

			// ChatUIConfiguration.Builder uiConfig = new ChatUIConfiguration.Builder()
			// 	.chatConfiguration(chatConfiguration)
			// 	.chatEventListener(TiApplication.getInstance()).getEventListener();
													
			// ServiceSDKApplication serviceSDKApplication = (ServiceSDKApplication) TiApplication.getInstance().getApplicationContext();
			// final ChatSessionListener chatListener = serviceSDKApplication.getChatSessionListener();
													
			ChatUI.configure(ChatUIConfiguration.create(chatConfiguration))
				.createClient(TiApplication.getInstance().getApplicationContext())
				.onResult(new Async.ResultHandler<ChatUIClient>() {
					@Override public void handleResult (Async<?> operation, 
					ChatUIClient chatUIClient) {
						//chatUIClient.addSessionStateListener(chatListener);
						chatUIClient.startChatSession(TiApplication.getAppCurrentActivity());
					}
			});										  
		}  catch (Exception e) {
			Log.e(LCAT, "error" , e);
		}
	}
}
